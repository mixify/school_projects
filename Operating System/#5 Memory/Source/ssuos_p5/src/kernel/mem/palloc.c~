#include <mem/palloc.h>
#include <bitmap.h>
#include <type.h>
#include <round.h>
#include <mem/mm.h>
#include <synch.h>
#include <device/console.h>
#include <mem/paging.h>
#include <proc/proc.h>

/* Page allocator.  Hands out memory in page-size (or
   page-multiple) chunks.
   */

/* page struct */
struct kpage{
    uint32_t type;//stack or heap or whatever...
    uint32_t *vaddr;// page's virtual address
    uint32_t nalloc;//number of allocated page??
    pid_t pid;//pid of allocated process
};


static struct kpage *kpage_list;
static uint32_t page_alloc_index;

/* Initializes the page allocator. */
    void
init_palloc (void)
{
    /* Calculate the space needed for the kpage list */
    size_t pool_size = sizeof(struct kpage) * PAGE_POOL_SIZE;

    /* kpage list alloc */
    kpage_list = (struct kpage *)(KERNEL_ADDR);

    /* initialize */
    memset((void*)kpage_list, 0, pool_size);
    page_alloc_index = 0;
}

/* Obtains and returns a group of PAGE_CNT contiguous free pages.
*/
    uint32_t *
palloc_get_multiple (uint32_t page_type, size_t page_cnt)
{
    void *pages = NULL;
    struct kpage *kpage = kpage_list;
    size_t page_idx = 0;
    int i,j;
    /* printk("sibal\n"); */

    if (page_cnt == 0)
        return NULL;

    for (i = 0; i < page_alloc_index; ++i) {
        /* printk("i = %d\n", i); */
        if(kpage[i].type == page_type)
        {
            page_idx += kpage[i].nalloc;
            /* printk("sibal %d\n", page_alloc_index); */
            /* printk("idx = %d\n", page_idx); */
        }
        else if(kpage[i].type == FREE__)
        {
            if(page_type==HEAP__ && kpage[i].nalloc == page_cnt)
            {
                pages = kpage[i].vaddr;//assign free page
                /* printk("realloc %x\n", pages); */
                break;
            }
            else if(page_type==STACK__ && kpage[i].nalloc == page_cnt+1024)
            {
                pages = kpage[i].vaddr;//assign free page
                break;
            }
        }
    }
    switch(page_type){
        case HEAP__: //(1)

            if(pages == NULL)
            {
                page_idx += page_cnt;
                /* printk("page_idx = %d\n", page_idx); */
                pages = (void*)(VKERNEL_HEAP_START - PAGE_SIZE * page_idx);
                kpage[page_alloc_index].nalloc = page_cnt;
                kpage[page_alloc_index].type = page_type;
                kpage[page_alloc_index].pid = cur_process->pid;
                kpage[page_alloc_index].vaddr = pages;
                page_alloc_index++;
            }
            else
            {
                kpage[i].nalloc = page_cnt;
                kpage[i].type = page_type;
                kpage[i].vaddr = pages;
                kpage[i].pid = cur_process->pid;
            }
            if(pages != NULL)
            {
                /* printk("before\n"); */
                /* printk("memset from %x to %x\n", pages- PAGE_SIZE*page_cnt, pages); */
                memset((void*)pages , 0, PAGE_SIZE * page_cnt);
                /* printk("after\n"); */
            }
            /* pages = (void*)VKERNEL_HEAP_START - PAGE_SIZE * page_idx - PAGE_SIZE * page_cnt; */

            /* palloc_free_multiple(pages, page_cnt); */


            /* printk("addr = %x\n", pages); */

            break;
        case STACK__:
            if(pages == NULL)
            {
                /* pages = VKERNEL_STACK_ADDR; */
                /* page_idx += page_cnt; */
                /* printk("page_idx = %d\n", page_idx); */
                /* pages = (void*)(VKERNEL_STACK_ADDR + PAGE_SIZE * (page_idx + page_cnt)); */
                /* printk("NULL?\n"); */
                pages = (void*)(VKERNEL_STACK_ADDR + page_idx * PAGE_SIZE);
                /* pages = (void*)(VKERNEL_HEAP_START - PAGE_SIZE * page_idx); */
                kpage[page_alloc_index].nalloc = page_cnt;
                kpage[page_alloc_index].type = page_type;
                kpage[page_alloc_index].vaddr = pages;
                kpage[page_alloc_index].pid = cur_process->pid;
                page_alloc_index++;
            }
            else
            {
                kpage[i].nalloc = page_cnt;
                kpage[i].type = page_type;
                kpage[i].vaddr = pages;
                kpage[i].pid = cur_process->pid;
            }
            if(pages != NULL)
            {
                memset((void*)pages - PAGE_SIZE * page_cnt , 0, PAGE_SIZE * page_cnt);
            }

            /* printk("pages = %x\n", pages); */
            //(2)

            break;
        default:
            return NULL;
    }

    /* return pages- PAGE_SIZE*page_cnt; */
    return (uint32_t*)pages;
}

/* Obtains a single free page and returns its address.
*/
    uint32_t *
palloc_get_page (uint32_t page_type)
{
    return palloc_get_multiple (page_type, 1);
}

/* Frees the PAGE_CNT pages starting at PAGES. */
    void
palloc_free_multiple (void *pages, size_t page_cnt)
{

    struct kpage *kpage = kpage_list;

    int i;

    /* printk("sibal\n"); */
    for (i = 0; i < page_alloc_index; ++i)
    {
        if(kpage_list[i].vaddr == pages)
        {
            if(kpage_list[i].type == HEAP__)
                kpage_list[i].nalloc = page_cnt;
            else
                kpage_list[i].nalloc = page_cnt+1024;
            kpage_list[i].type = FREE__;

            return;
        }
    }

}

/* Frees the page at PAGE. */
    void
palloc_free_page (void *page)
{
    palloc_free_multiple (page, 1);
}


uint32_t *
va_to_ra (uint32_t *va){
    uint32_t *ra = NULL;
    uint32_t *pt = NULL;
    uint32_t offset;
    /* uint32_t bit_va =  (uint32_t)va; */
    /*  */
    /* printk("va = %x\n", va); */
    if(va <= RKERNEL_HEAP_START)
        return va;

    /* return VH_TO_RH(va); */
    /* offset = 0x00000FFF & bit_va; */

    /* pt = pt_addr(va); */
    /* ra = pg_addr(va); */
    /* ra += offset; */
    /* printk("offset = %d\n", offset); */
    /* printk("ra with offset = %x\n", ra); */

    /* ra =  */
    /* if(pt == NULL || ra == NULL) */
    return VH_TO_RH(va);
    /* ra = (uint32_t *) ( RKERNEL_HEAP_START + (VKERNEL_HEAP_START - (uint32_t)va) ); */
    /* printk("actual = %x\n", ra); */
    /* printk("ra = %x\n", ra); */
    /*  */
    /*  */
    /* return ra; */
}

uint32_t *
ra_to_va (uint32_t *ra){
    /* uint32_t *va = NULL; */
    //start from VKERNEL_HEAP_START
    if(ra <= RKERNEL_HEAP_START)
        return ra;

    /* return RH_TO_VH(ra); */
    /* printk("ra = %x\n", ra); */
    /* va = (uint32_t *)( VKERNEL_HEAP_START - ((uint32_t)ra - RKERNEL_HEAP_START) ); */
    /* va = RH_TO_VH(ra); */
    return RH_TO_VH(ra);
    /* printk("va = %x\n", va); */

    /* return va; */
}

void palloc_pf_test(void)
{
    uint32_t *one_page1 = palloc_get_page(HEAP__);
    uint32_t *one_page2 = palloc_get_page(HEAP__);
    uint32_t *two_page1 = palloc_get_multiple(HEAP__,2);
    uint32_t *three_page;
    printk("one_page1 = %x\n", one_page1);
    printk("one_page2 = %x\n", one_page2);
    printk("two_page1 = %x\n", two_page1);

    printk("=----------------------------------=\n");
    palloc_free_page(one_page1);
    palloc_free_page(one_page2);
    palloc_free_multiple(two_page1,2);

    one_page1 = palloc_get_page(HEAP__);
    two_page1 = palloc_get_multiple(HEAP__,2);
    one_page2 = palloc_get_page(HEAP__);

    printk("one_page1 = %x\n", one_page1);
    printk("one_page2 = %x\n", one_page2);
    printk("two_page1 = %x\n", two_page1);

    printk("=----------------------------------=\n");
    three_page = palloc_get_multiple(HEAP__,3);

    printk("three_page = %x\n", three_page);
    palloc_free_page(one_page1);
    palloc_free_page(one_page2);
    palloc_free_multiple(two_page1,2);
    palloc_free_multiple(three_page, 3);
}
